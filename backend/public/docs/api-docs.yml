openapi: 3.0.0
info:
  title: School Management System API
  description: Comprehensive API for managing school operations with role-based access control
  version: 2.1.0
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.schoolmgmt.com/v2
    description: Production server

components:
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT in HTTP-only cookie

  schemas:
    InstallResult:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Database setup completed"

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: admin@school.com
        password:
          type: string
          example: securePassword123
      required: [email, password]

    LoginResponse:
      type: object
      properties:
        user_id:
          type: string
          example: USR_001
        role:
          type: string
          example: admin
        message:
          type: string
          example: Login successful

    UserProfile:
      type: object
      properties:
        user_id:
          type: string
        role:
          type: string
        email:
          type: string

    User:
      type: object
      properties:
        user_id:
          type: string
        email:
          type: string
        role: 
          type: string
          enum: [admin, academic, registrar, teacher, student, parent]

      RegisterStudentRequest:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: student@school.com
        status:
          type: string
          enum: [active, inactive, graduated]
          default: active
      required:
        - first_name
        - last_name
        - email

    Student:
      type: object
      properties:
        student_id:
          type: string
          example: STU_001
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: student@school.com
        status:
          type: string
          enum: [active, inactive, graduated]
          example: active

    RegisterTeacherRequest:
      type: object
      properties:
        first_name:
          type: string
          example: Jane
        last_name:
          type: string
          example: Smith
        email:
          type: string
          format: email
          example: teacher@school.com
        subject:
          type: string
          example: Mathematics
      required:
        - first_name
        - last_name
        - email
        - subject

    Teacher:
      type: object
      properties:
        teacher_id:
          type: string
          example: TCHR_001
        first_name:
          type: string
          example: Jane
        last_name:
          type: string
          example: Smith
        email:
          type: string
          format: email
          example: teacher@school.com
        subject:
          type: string
          example: Mathematics

    Student:
      type: object
      properties:
        student_id:
          type: string
          example: STU_001
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        status:
          type: string
          enum: [active, inactive, graduated]

    Exam:
      type: object
      properties:
        exam_id:
          type: string
          example: EXAM_101
        class_id:
          type: string
          example: CLS_101
        exam_type:
          type: string
          enum: [midterm, final, quiz]

    Payment:
      type: object
      properties:
        payment_id:
          type: string
          example: PAY_001
        amount:
          type: number
          format: double
          example: 150.50
        status:
          type: string
          enum: [pending, completed, failed, refunded]

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Authentication required"

  responses:
    InstallationError:
      description: Installation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnauthorizedError:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /system/install:
    post:
      tags: [System]
      summary: Initialize database schema
      description: One-time database installation (disable in production)
      requestBody:
        required: false
      responses:
        200:
          description: Database initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallResult'
        500:
          $ref: '#/components/responses/InstallationError'

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: teacher@school.com
                password:
                  type: string
                  example: securePassword123
              required:
                - email
                - password
      responses:
        200:
          description: Successful login
          headers:
            Set-Cookie:
              schema: 
                type: string
                example: jwt=abc123; HttpOnly; Path=/; Max-Age=3600
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Invalid credentials

  /auth/logout:
    post:
      tags: [Authentication]
      summary: User logout  
      responses:
        200:
          description: Successfully logged out
          headers:
            Set-Cookie:
              schema: 
                type: string
                example: jwt=; HttpOnly; Path=/; Max-Age=0
        401:
          description: Unauthorized


  /admin/users:
    get:
      tags: [Admin]
      summary: List all users
      security:
        - jwtAuth: [admin]
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /admin/system/academic-year:
    post:
      tags: [Admin]
      summary: Configure academic year
      security:
        - jwtAuth: [admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                year:
                  type: string
                  example: "2023-2024"
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
      responses:
        201:
          description: Academic year configured
        400:
          description: Invalid date range

  /academic/classes:
    post:
      tags: [Academic]
      summary: Create new class
      security:
        - jwtAuth: [academic]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                class_name:
                  type: string
                teacher_id:
                  type: string
                subject_id:
                  type: string
      responses:
        201:
          description: Class created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'


  /registrar/students:
    post:
      tags: [Registrar]
      summary: Register a new student
      security:
        - jwtAuth: [registrar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterStudentRequest'
      responses:
        201:
          description: Student successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        400:
          description: Invalid input data
    get:
      tags: [Registrar]
      summary: List students with filters
      security:
        - jwtAuth: [registrar]
      responses:
        200:
          description: List of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /registrar/students/{studentId}:
    parameters:
      - name: studentId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Registrar]
      summary: Get student details
      security:
        - jwtAuth: [registrar]
      responses:
        200:
          description: Student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        404:
          description: Student not found
    patch:
      tags: [Registrar]
      summary: Update student record
      security:
        - jwtAuth: [registrar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterStudentRequest'
      responses:
        200:
          description: Student updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        400:
          description: Invalid input
        404:
          description: Student not found
    delete:
      tags: [Registrar]
      summary: Delete student record
      security:
        - jwtAuth: [registrar]
      responses:
        200:
          description: Student deleted successfully
        404:
          description: Student not found

  /registrar/teachers:
    post:
      tags: [Registrar]
      summary: Register a new teacher
      security:
        - jwtAuth: [registrar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTeacherRequest'
      responses:
        201:
          description: Teacher successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        400:
          description: Invalid input data
    get:
      tags: [Registrar]
      summary: List teachers
      security:
        - jwtAuth: [registrar]
      responses:
        200:
          description: List of teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
        403:
          $ref: '#/components/responses/ForbiddenError'

  /registrar/teachers/{teacherId}:
    parameters:
      - name: teacherId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Registrar]
      summary: Get teacher details
      security:
        - jwtAuth: [registrar]
      responses:
        200:
          description: Teacher details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        404:
          description: Teacher not found

    patch:
      tags: [Registrar]
      summary: Update teacher record
      security:
        - jwtAuth: [registrar]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTeacherRequest'
      responses:
        200:
          description: Teacher updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
        400:
          description: Invalid input
        404:
          description: Teacher not found
    delete:
      tags: [Registrar]
      summary: Delete teacher record
      security:
        - jwtAuth: [registrar]
      responses:
        200:
          description: Teacher deleted successfully
        404:
          description: Teacher not found


  /teacher/attendance:
    post:
      tags: [Teacher]
      summary: Record attendance
      security:
        - jwtAuth: [teacher]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                class_id:
                  type: string
                date:
                  type: string
                  format: date
                records:
                  type: array
                  items:
                    type: object
                    properties:
                      student_id:
                        type: string
                      status:
                        type: string
                        enum: [present, absent, excused]
      responses:
        201:
          description: Attendance recorded
        403:
          description: Unauthorized for class

  /student/schedule:
    get:
      tags: [Student]
      summary: Get class schedule
      security:
        - jwtAuth: [student]
      responses:
        200:
          description: Student's schedule
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    class_name:
                      type: string
                    schedule:
                      type: string

  /parent/payments:
    post:
      tags: [Parent]
      summary: Make payment
      security:
        - jwtAuth: [parent]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                student_id:
                  type: string
                amount:
                  type: number
                purpose:
                  type: string
                  enum: [tuition, uniform, activities, other]
      responses:
        201:
          description: Payment initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

  /health:
    get:
      tags: [System]
      summary: System health check
      responses:
        200:
          description: System status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  database:
                    type: string

tags:
  - name: Installation
    description: Database initialization
  - name: Authentication
    description: User authentication and profile management
  - name: Admin
    description: User and system management
  - name: Academic
    description: Class and exam management
  - name: Registrar
    description: Student and teacher registration
  - name: Teacher
    description: Classroom operations
  - name: Student
    description: Student access
  - name: Parent
    description: Parent services
  - name: System
    description: Health and monitoring
