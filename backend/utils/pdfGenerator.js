import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';

const createDirectory = (directory) => {
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory, { recursive: true });
  }
};

export const generateReceiptPDF = async (paymentDetails) => {
  try {
    const receiptsDir = path.join(process.cwd(), 'receipts');
    createDirectory(receiptsDir);

    const doc = new PDFDocument();
    const fileName = `receipt_${paymentDetails.payment_id}.pdf`;
    const filePath = path.join(receiptsDir, fileName);

    doc.pipe(fs.createWriteStream(filePath));

    // Header
    doc.fontSize(18).text('School Payment Receipt', { align: 'center' });
    doc.moveDown(0.5);
    doc.rect(50, 80, 500, 200).stroke();

    // Payment Details
    doc.fontSize(12)
      .text(`Receipt Number: ${paymentDetails.payment_id}`, { align: 'left' })
      .text(`Date: ${new Date().toLocaleDateString()}`, { align: 'right' })
      .moveDown()
      .text(`Parent ID: ${paymentDetails.parent_id}`)
      .text(`Student ID: ${paymentDetails.student_id}`)
      .moveDown()
      .text(`Amount: $${paymentDetails.amount.toFixed(2)}`, { underline: true })
      .text(`Purpose: ${paymentDetails.purpose}`)
      .moveDown()
      .text('Payment Status: COMPLETED', { color: '#00ff00' });

    // Footer
    doc.fontSize(10)
      .text('Official School Receipt - Thank you for your payment!', 50, 250, {
        align: 'center'
      });

    doc.end();

    return filePath;
  } catch (err) {
    throw new Error('Receipt generation failed');
  }
};

export const generateExamReport = async (examDetails, results) => {
  try {
    const reportsDir = path.join(process.cwd(), 'reports');
    createDirectory(reportsDir);

    const doc = new PDFDocument();
    const fileName = `exam_report_${examDetails.exam_id}.pdf`;
    const filePath = path.join(reportsDir, fileName);

    doc.pipe(fs.createWriteStream(filePath));

    // Header
    doc.fontSize(18).text('Exam Results Report', { align: 'center' });
    doc.fontSize(12)
      .text(`Exam ID: ${examDetails.exam_id}`)
      .text(`Class: ${examDetails.class_name}`, { align: 'right' })
      .moveDown()
      .text(`Subject: ${examDetails.subject_name}`)
      .text(`Date: ${new Date(examDetails.exam_date).toLocaleDateString()}`, { align: 'right' })
      .moveDown(0.5);

    // Results Table Header
    doc.font('Helvetica-Bold')
      .fillColor('#333333')
      .text('Student Name', 50, 150)
      .text('Score', 300)
      .text('Remarks', 400)
      .moveTo(50, 160)
      .lineTo(550, 160)
      .stroke();

    // Results Rows
    let y = 170;
    results.forEach((result, index) => {
      doc.font('Helvetica')
        .fillColor('#000000')
        .text(`${result.first_name} ${result.last_name}`, 50, y)
        .text(result.score.toString(), 300, y)
        .text(result.remarks || '-', 400, y)
        .moveTo(50, y + 15)
        .lineTo(550, y + 15)
        .stroke();

      y += 20;
    });

    // Statistics
    doc.font('Helvetica-Bold')
      .text(`Average Score: ${examDetails.average_score.toFixed(2)}`, 50, y + 20)
      .text(`Total Students: ${examDetails.total_students}`, 300, y + 20);

    // Footer
    doc.fontSize(10)
      .text('Generated by School Management System', 50, 780, {
        align: 'center'
      })
      .text(new Date().toLocaleString(), { align: 'right' });

    doc.end();

    return filePath;
  } catch (err) {
    throw new Error('Exam report generation failed');
  }
};